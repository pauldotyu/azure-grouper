# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: kvdevops1

stages:
  - stage: plan
    displayName: Plan
    condition: and(ne(variables.namespace, ''), eq(variables.destroy, false))
    jobs:
      - job: terraform_plan
        displayName: Terraform Plan
        steps:
          - script: |
              echo "##vso[task.setvariable variable=PSQL_PASSWORD_GROUPER_ENCRYPTED;]$(java -cp .:grouperClient-2.5.39.jar edu.internet2.middleware.morphString.Encrypt dontMask <<< $(psql-password) | sed 's/Type the string to encrypt (note: pasting might echo it back): The encrypted string is: //')"
            displayName: Grouper encrypt passwords
            name: grouper_encrypt
            workingDirectory: docker/slashRoot/opt/grouper/grouperWebapp/WEB-INF/classes
          - task: DownloadSecureFile@1
            name: terraformrc
            displayName: "Download .terraformrc"
            inputs:
              secureFile: ".terraformrc"
          - task: DownloadSecureFile@1
            name: terraformbackend
            displayName: "Download backend.hcl"
            inputs:
              secureFile: "backend.hcl"
          - script: |
              export ARM_CLIENT_ID=$(client-id)
              export ARM_CLIENT_SECRET=$(client-secret)
              export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTIONID)
              export ARM_TENANT_ID=$(tenant-id)
              export TF_CLI_CONFIG_FILE="$(terraformrc.secureFilePath)"
              terraform init -backend-config="$(terraformbackend.secureFilePath)"
              terraform plan -var-file="$(namespace).tfvars" -var="psql_login=$(psql-user)" -var="psql_password=$(psql-password)" -var="psql_password_grouper_encrypted=$(PSQL_PASSWORD_GROUPER_ENCRYPTED)" -var="aks_admin_group_object_id=$(aks-admin-group-object-id)" -var="email=$(notifyUsers)" -var="grouper_system_password=$(GROUPERSYSTEMPASSWORD)" -out=$(System.DefaultWorkingDirectory)/$(namespace).tfplan
            displayName: Terraform Plan
            name: terraform_plan
            workingDirectory: terraform
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/$(namespace).tfplan"
              artifactName: "tfplan"
            displayName: Publish $(namespace).tfplan
            name: publish_tfplan
  - stage: build
    displayName: Build
    condition: eq(dependencies.plan.result, 'Succeeded')
    dependsOn: plan
    jobs:
      - job: review_plan
        displayName: Review Plan
        pool: Server
        steps:
          - task: ManualValidation@0
            inputs:
              notifyUsers: $(notifyUsers)
              instructions: "Have you taken a look at the terraform plan output?"
            displayName: Review Plan
            name: review_plan
      - job: apply
        displayName: Terraform Apply
        condition: eq(dependencies.review_plan.result, 'Succeeded')
        dependsOn: review_plan
        steps:
          - task: DownloadSecureFile@1
            name: terraformrc
            displayName: "Download .terraformrc"
            inputs:
              secureFile: ".terraformrc"
          - task: DownloadSecureFile@1
            name: terraformbackend
            displayName: "Download backend.hcl"
            inputs:
              secureFile: "backend.hcl"
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: tfplan
              patterns: "**/*.tfplan"
              path: $(System.DefaultWorkingDirectory)
            displayName: Download $(namespace).tfplan
            name: download_tfplan
          - script: |
              export ARM_CLIENT_ID=$(client-id)
              export ARM_CLIENT_SECRET=$(client-secret)
              export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTIONID)
              export ARM_TENANT_ID=$(tenant-id)
              export TF_CLI_CONFIG_FILE="$(terraformrc.secureFilePath)"
              terraform init -backend-config="$(terraformbackend.secureFilePath)"
              terraform apply --auto-approve $(System.DefaultWorkingDirectory)/$(namespace).tfplan
              echo "##vso[task.setvariable variable=RG_NAME;isOutput=true]$(terraform output -raw rg_name)"
              echo "##vso[task.setvariable variable=AKS_NAME;isOutput=true]$(terraform output -raw aks_name)"

              # Log into Azure
              az login --service-principal --username $(client-id) --password $(client-secret) --tenant $(tenant-id)
              az account set -s $(SUBSCRIPTIONID)

              # ACR task to build the container
              az acr build -t grouper:latest -r $(terraform output -raw acr_login_server) ../docker

              # Enable Azure AD Pod Identity
              # This will be temporary until pod-identity goes GA and added via AKS addon
              az provider register --namespace Microsoft.ContainerService
              az feature register --name EnablePodIdentityPreview --namespace Microsoft.ContainerService
              az extension add --name aks-preview
              az extension update --name aks-preview
              pod=$(az aks show -g $(terraform output -raw rg_name) -n $(terraform output -raw aks_name) --query podIdentityProfile.enabled)
              if [ -z "$pod" ] || [ "$pod" == "false" ]
              then
                echo "podIdentityProfile being enabling now..."
                az aks update -g $(terraform output -raw rg_name) -n $(terraform output -raw aks_name) --enable-pod-identity
                az aks pod-identity add -g $(terraform output -raw rg_name) --cluster-name $(terraform output -raw aks_name) --namespace grouper --name grouper-pod-identity --identity-resource-id $(terraform output -raw aks_managed_identity_resource_id)
              else
                echo "podIdentityProfile already enabled"
              fi

              # Apply Kubernetes manifests
              kubectl create namespace $(namespace) --dry-run=client -o yaml | kubectl apply -f -
              kubectl apply -f ../kubernetes/grouper-secrets-provider.yaml -n $(namespace)
              kubectl apply -f ../kubernetes/grouper-daemon.yaml -n $(namespace)
              kubectl apply -f ../kubernetes/grouper-ws.yaml -n $(namespace)
              kubectl apply -f ../kubernetes/grouper-ui.yaml -n $(namespace)
              kubectl get all -n $(namespace)
            displayName: Terraform Apply
            name: apply
            workingDirectory: terraform
  - stage: destroy
    displayName: Destroy
    condition: and(ne(variables.namespace, ''), eq(variables.destroy, true))
    jobs:
      - job: do_destroy
        displayName: Destroy
        pool: Server
        steps:
          - task: ManualValidation@0
            inputs:
              notifyUsers: $(notifyUsers)
              instructions: "You sure you want to destroy?"
            name: do_destroy
      - job: terraform_destroy
        displayName: Terraform Destroy
        condition: eq(dependencies.do_destroy.result, 'Succeeded')
        dependsOn: do_destroy
        steps:
          - task: DownloadSecureFile@1
            name: terraformrc
            displayName: "Download .terraformrc"
            inputs:
              secureFile: ".terraformrc"
          - task: DownloadSecureFile@1
            name: terraformbackend
            displayName: "Download backend.hcl"
            inputs:
              secureFile: "backend.hcl"
          - script: |
              export ARM_CLIENT_ID=$(client-id)
              export ARM_CLIENT_SECRET=$(client-secret)
              export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTIONID)
              export ARM_TENANT_ID=$(tenant-id)
              export TF_CLI_CONFIG_FILE="$(terraformrc.secureFilePath)"
              terraform init -backend-config="$(terraformbackend.secureFilePath)"
              terraform destroy -var-file="$(namespace).tfvars" -var="psql_login=$(psql-user)" -var="psql_password=$(psql-password)" -var="psql_password_grouper_encrypted=$(PSQL_PASSWORD_GROUPER_ENCRYPTED)" -var="aks_admin_group_object_id=$(aks-admin-group-object-id)" -var="grouper_system_password=$(GROUPERSYSTEMPASSWORD)" --auto-approve
            displayName: Destroy infrastructure
            workingDirectory: terraform
