# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: kvdevops1

stages:
- stage: plan
  displayName: Plan
  condition: and(ne(variables.workspace, ''), eq(variables.destroy, false))
  jobs: 
  - job: terraform_plan
    displayName: Terraform Plan 
    steps:
    - script: |
        echo "##vso[task.setvariable variable=PSQL_PASSWORD_GROUPER_ENCRYPTED;]$(java -cp .:grouperClient-2.5.39.jar edu.internet2.middleware.morphString.Encrypt dontMask <<< $(psql-password) | sed 's/Type the string to encrypt (note: pasting might echo it back): The encrypted string is: //')"
      displayName: Grouper encrypt passwords
      name: grouper_encrypt
      workingDirectory: slashRoot/opt/grouper/grouperWebapp/WEB-INF/classes
    - task: DownloadSecureFile@1
      name: terraformrc
      displayName: 'Download .terraformrc'
      inputs:
        secureFile: '.terraformrc'
    - script: |
        export ARM_CLIENT_ID=$(client-id) 
        export ARM_CLIENT_SECRET=$(client-secret)
        export ARM_SUBSCRIPTION_ID=$(main-subscription-id)
        export ARM_TENANT_ID=$(tenant-id)
        export TF_CLI_CONFIG_FILE="$(terraformrc.secureFilePath)"
        terraform init
        terraform workspace select $(workspace) || terraform workspace new $(workspace)
        terraform plan -var-file="$(workspace).tfvars" -var="psql_login=$(psql-user)" -var="psql_password=$(psql-password)" -var="psql_password_grouper_encrypted=$(PSQL_PASSWORD_GROUPER_ENCRYPTED)" -var="aks_admin_group_object_id=$(aks-admin-group-object-id)" -out=$(System.DefaultWorkingDirectory)/$(workspace).tfplan
      displayName: Terraform Plan
      name: terraform_plan
      workingDirectory: terraform
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/$(workspace).tfplan'
        artifactName: 'tfplan'
      displayName: Publish $(workspace).tfplan
      name: publish_tfplan
